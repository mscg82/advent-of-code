package com.mscg;

import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.assertEquals;

class UnstableDiffusionTest
{

	@Test
	void testNext() throws Exception
	{
		final var diff = UnstableDiffusion.parseInput(new BufferedReader(new StringReader("""
				.....
				..##.
				..#..
				.....
				..##.
				.....""")));

		final var next1 = diff.next();
		assertEquals(Set.of( //
				new UnstableDiffusion.Position(2, 0), //
				new UnstableDiffusion.Position(3, 0), //
				new UnstableDiffusion.Position(2, 2), //
				new UnstableDiffusion.Position(2, 4), //
				new UnstableDiffusion.Position(3, 3)), next1.elfPositions());

		final var next2 = next1.next();
		assertEquals(Set.of( //
				new UnstableDiffusion.Position(2, 1), //
				new UnstableDiffusion.Position(3, 1), //
				new UnstableDiffusion.Position(1, 2), //
				new UnstableDiffusion.Position(2, 5), //
				new UnstableDiffusion.Position(4, 3)), next2.elfPositions());

		final var next3 = next2.next();
		assertEquals(Set.of( //
				new UnstableDiffusion.Position(2, 0), //
				new UnstableDiffusion.Position(4, 1), //
				new UnstableDiffusion.Position(0, 2), //
				new UnstableDiffusion.Position(4, 3), //
				new UnstableDiffusion.Position(2, 5)), next3.elfPositions());
	}

	@Test
	void testNext2() throws Exception
	{
		final var diff = UnstableDiffusion.parseInput(new BufferedReader(new StringReader("""
				....#..
				..###.#
				#...#.#
				.#...##
				#.###..
				##.#.##
				.#..#..""")));

		final var states = new ArrayList<UnstableDiffusion>(11);
		var current = diff;
		for (int i = 0; i < 11; i++) {
			states.add(current);
			current = current.next();
		}

		assertEquals("""
				..............
				..............
				.......#......
				.....###.#....
				...#...#.#....
				....#...##....
				...#.###......
				...##.#.##....
				....#..#......
				..............
				..............
				..............
				""", states.get(0).print(-3, 10, -2, 9));

		assertEquals("""
				..............
				.......#......
				.....#...#....
				...#..#.#.....
				.......#..#...
				....#.#.##....
				..#..#.#......
				..#.#.#.##....
				..............
				....#..#......
				..............
				..............
				""", states.get(1).print(-3, 10, -2, 9));

		assertEquals("""
				..............
				.......#......
				....#.....#...
				...#..#.#.....
				.......#...#..
				...#..#.#.....
				.#...#.#.#....
				..............
				..#.#.#.##....
				....#..#......
				..............
				..............
				""", states.get(2).print(-3, 10, -2, 9));

		assertEquals("""
				..............
				.......#......
				.....#....#...
				..#..#...#....
				.......#...#..
				...#..#.#.....
				.#..#.....#...
				.......##.....
				..##.#....#...
				...#..........
				.......#......
				..............
				""", states.get(3).print(-3, 10, -2, 9));

		assertEquals("""
				..............
				.......#......
				......#....#..
				..#...##......
				...#.....#.#..
				.........#....
				.#...###..#...
				..#......#....
				....##....#...
				....#.........
				.......#......
				..............
				""", states.get(4).print(-3, 10, -2, 9));

		assertEquals("""
				.......#......
				..............
				..#..#.....#..
				.........#....
				......##...#..
				.#.#.####.....
				...........#..
				....##..#.....
				..#...........
				..........#...
				....#..#......
				..............
				""", states.get(5).print(-3, 10, -2, 9));

		assertEquals("""
				.......#......
				...........#..
				..#.#..#......
				......#.......
				...#.....#..#.
				.#......##....
				.....##.......
				..#........#..
				....#.#..#....
				..............
				....#..#..#...
				..............
				""", states.get(10).print(-3, 10, -2, 9));

	}

	@Test
	void testCountFreeSpace() throws Exception
	{
		final var diff = UnstableDiffusion.parseInput(new BufferedReader(new StringReader("""
				....#..
				..###.#
				#...#.#
				.#...##
				#.###..
				##.#.##
				.#..#..""")));

		assertEquals(110, diff.countFreeSpaces(10));
	}

	@Test
	void testFirstRoundWithoutMovement() throws Exception
	{
		final var diff = UnstableDiffusion.parseInput(new BufferedReader(new StringReader("""
				....#..
				..###.#
				#...#.#
				.#...##
				#.###..
				##.#.##
				.#..#..""")));

		assertEquals(20, diff.findFirstRoundWithoutMovement());
	}

}
